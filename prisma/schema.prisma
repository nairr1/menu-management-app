// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Menus {
    id                          Int @id @default(autoincrement())
    active                      Int @default(1)
    menuName                    String @unique @db.VarChar(50)
    menuDisplayName             String @db.VarChar(50)
    menuType                    Int
    priceLevel                  Int
    updatedUserId               String @db.VarChar(255)             
    userId                      String @db.VarChar(255)
    createdAt                   DateTime @default(now())
    updatedAt                   DateTime @updatedAt
    menuAvailability            MenuAvailability[]
    menuLocationMapping         MenuLocationMapping[]
    menuCategoriesMenuMapping   MenuCategoriesMenuMapping[]
}

model MenuAvailability {
    id          Int @id @default(autoincrement())
    menu        Menus @relation(fields: [menuId], references: [id]) 
    menuId      Int
    dayOfWeek   Int
    startTime   String @db.VarChar(5)
    endTime     String @db.VarChar(5)
}

model MenuLocationMapping {
    id          Int @id @default(autoincrement())
    menu        Menus @relation(fields: [menuId], references: [id]) 
    menuId      Int
    location    Locations @relation(fields: [locationId], references: [id])
    locationId  Int
}

model MenuCategories {
    id                          Int @id @default(autoincrement())
    active                      Int @default(1)
    menuCategoryName            String @unique @db.VarChar(50)
    menuCategoryDisplayName     String @db.VarChar(50)
    description                 String @db.VarChar(255)
    position                    Int
    userId                      String @db.VarChar(255)
    updatedUserId               String @db.VarChar(255)           
    createdAt                   DateTime @default(now())
    updatedAt                   DateTime @updatedAt
    menuCategoryItems           MenuCategoryItems[]
    menuCategoryAvailability    MenuCategoryAvailability[]
    menuCategoryLocationMapping MenuCategoryLocationMapping[]
    menuCategoriesMenuMapping   MenuCategoriesMenuMapping[]
}

model MenuCategoriesMenuMapping {
    id              Int @id @default(autoincrement())
    menu            Menus @relation(fields: [menuId], references: [id]) 
    menuId          Int
    menuCategory    MenuCategories @relation(fields: [menuCategoryId], references: [id]) 
    menuCategoryId  Int
    position        Int
    userId          String @db.VarChar(255)
    createdAt       DateTime @default(now())
}

model MenuCategoryAvailability {
    id              Int @id @default(autoincrement())
    menuCategory    MenuCategories @relation(fields: [menuCategoryId], references: [id]) 
    menuCategoryId  Int
    dayOfWeek       Int
    startTime       String @db.VarChar(5)
    endTime         String @db.VarChar(5)
}

model MenuCategoryLocationMapping {
    id              Int @id @default(autoincrement())
    menuCategory    MenuCategories @relation(fields: [menuCategoryId], references: [id]) 
    menuCategoryId  Int
    location        Locations @relation(fields: [locationId], references: [id])
    locationId      Int
}

model MenuCategoryItems {
    id              Int @id @default(autoincrement())
    menuCategory    MenuCategories @relation(fields: [menuCategoryId], references: [id])
    menuCategoryId  Int
    item            Items @relation(fields: [itemId], references: [id])
    itemId          Int
    position        Int
    userId          String @db.VarChar(255)       
    createdAt       DateTime @default(now())
}

model Items {
    id                      Int @id @default(autoincrement())
    active                  Int @default(1)
    itemName                String @unique @db.VarChar(50)
    itemDisplayName         String @db.VarChar(50)
    priceLevelOne           String @db.VarChar(100)
    priceLevelTwo           String @db.VarChar(100)
    priceLevelThree         String @db.VarChar(100) 
    awardedPointsOne        Int
    awardedPointsTwo        Int
    awardedPointsThree      Int 
    redemptionPointsOne     Int
    redemptionPointsTwo     Int
    redemptionPointsThree   Int 
    description             String @db.VarChar(255)
    image                   String @db.VarChar(255)
    category                ItemCategories @relation(fields: [categoryId], references: [id])
    categoryId              Int
    class                   ItemClasses @relation(fields: [classId], references: [id])
    classId                 Int
    energy                  Int
    userId                  String @db.VarChar(255)
    updatedUserId           String @db.VarChar(255)           
    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt
    itemRecipeMapping       ItemRecipeMapping[]
    itemChoiceMapping       ItemChoiceMapping[]
    choiceItems             ChoiceItems[]
    itemLocationMapping     ItemLocationMapping[]
    menuCategoryItems       MenuCategoryItems[]
}

model Ingredients {
    id                  Int @id @default(autoincrement())
    active              Int @default(1)
    ingredientName      String @unique @db.VarChar(50)
    amount              Int
    unit                Int
    itemRecipeMapping   ItemRecipeMapping[]
}

model ItemRecipeMapping {
    id              Int @id @default(autoincrement())
    ingredient      Ingredients @relation(fields: [ingredientId], references: [id])
    ingredientId    Int
    parentItem      Items @relation(fields: [parentItemId], references: [id])
    parentItemId    Int
}

model Choices {
    id                  Int @id @default(autoincrement())
    active              Int @default(1)
    choiceName          String @unique @db.VarChar(50)
    choiceDisplayName   String @db.VarChar(50)
    selections          Int
    required            Boolean
    position            Int
    description         String @db.VarChar(255)
    userId              String @db.VarChar(255)
    updatedUserId       String @db.VarChar(255)             
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    itemChoiceMapping   ItemChoiceMapping[]
    choiceItems         ChoiceItems[]
}

model ItemChoiceMapping {
    id              Int @id @default(autoincrement())
    choice          Choices @relation(fields: [choiceId], references: [id])
    choiceId        Int
    parentItem      Items @relation(fields: [parentItemId], references: [id])
    parentItemId    Int
    position        Int
    userId          String @db.VarChar(255)          
    createdAt       DateTime @default(now())
}

model ChoiceItems {
    id                      Int @id @default(autoincrement())
    childItem               Items @relation(fields: [childItemId], references: [id])
    childItemId             Int
    choice                  Choices @relation(fields: [choiceId], references: [id])
    choiceId                Int
    updatedPriceLevelOne    String @db.VarChar(100)
    updatedPriceLevelTwo    String @db.VarChar(100)
    updatedPriceLevelThree  String @db.VarChar(100)
    position                Int
    userId                  String @db.VarChar(255)     
    createdAt               DateTime @default(now())
}

model ItemLocationMapping {
    id                      Int @id @default(autoincrement())
    item                    Items @relation(fields: [itemId], references: [id])
    itemId                  Int
    location                Locations @relation(fields: [locationId], references: [id])
    locationId              Int
    locationPriceLevelOne   Int?
    locationPriceLevelTwo   Int?
    locationPriceLevelThree Int?
}

model ItemCategories {
    id              Int @id @default(autoincrement())
    active          Int @default(1)
    categoryName    String @unique @db.VarChar(50)
    userId          String @db.VarChar(255)
    updatedUserId   String @db.VarChar(255)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    items           Items[]
}

model ItemClasses {
    id              Int @id @default(autoincrement())
    active          Int @default(1)
    className       String @unique @db.VarChar(50)
    position        Int
    userId          String @db.VarChar(255)
    updatedUserId   String @db.VarChar(255)             
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    items           Items[]
}

model Locations {
    id                              Int @id @default(autoincrement())
    uuid                            String @unique @default(uuid())
    active                          Int @default(1)
    locationName                    String @unique @db.VarChar(50)
    streetOne                       String @db.VarChar(50)
    streetTwo                       String? @db.VarChar(50)
    suburb                          String @db.VarChar(50)
    state                           String @db.VarChar(50)
    postcode                        String @db.VarChar(10)
    country                         String @db.VarChar(50)
    timezone                        String @db.VarChar(50)
    phone                           String @db.VarChar(20)
    googleMapsLink                  String? @db.VarChar(255)
    userId                          String @db.VarChar(255)
    updatedUserId                   String @db.VarChar(255)             
    createdAt                       DateTime @default(now())
    updatedAt                       DateTime @updatedAt
    itemLocationMapping             ItemLocationMapping[]
    locationStatusLogs              LocationStatusLogs[]
    tradingHours                    TradingHours[]
    customTradingHours              CustomTradingHours[]
    publicHolidayLocationMapping    PublicHolidayLocationMapping[]
    orderHeader                     OrderHeader[]
    menuLocationMapping             MenuLocationMapping[]
    menuCategoryLocationMapping     MenuCategoryLocationMapping[]
}

model LocationStatusLogs {
    id          Int @id @default(autoincrement())
    location    Locations @relation(fields: [locationId], references: [id])
    locationId  Int
    status      Int
    lastOnline  DateTime @updatedAt
    openNow     Boolean
}

model TradingHours {
    id          Int @id @default(autoincrement())
    location    Locations @relation(fields: [locationId], references: [id])
    locationId  Int
    dayOfWeek   Int
    startTime   String @db.VarChar(5)
    endTime     String @db.VarChar(5)
    closed      Boolean
}

model CustomTradingHours {
    id          Int @id @default(autoincrement())
    location    Locations @relation(fields: [locationId], references: [id])
    locationId  Int
    day         Int
    month       Int
    year        Int
    startTime   String @db.VarChar(5)
    endTime     String @db.VarChar(5)
    closed      Boolean
}

model PublicHolidays {
    id                              Int @id @default(autoincrement())
    date                            String @db.VarChar(5)
    holidayName                     String @db.VarChar(50)
    closed                          Boolean
    publicHolidayLocationMapping    PublicHolidayLocationMapping[]
    userId                          String @db.VarChar(255)
    updatedUserId                   String @db.VarChar(255)             
    createdAt                       DateTime @default(now())
    updatedAt                       DateTime @updatedAt
}

model PublicHolidayLocationMapping {
    id              Int @id @default(autoincrement())
    location        Locations @relation(fields: [locationId], references: [id])
    locationId      Int
    publicHoliday   PublicHolidays @relation(fields: [publicHolidayId], references: [id])
    publicHolidayId Int
}

model OrderHeader {
    id              Int @id @default(autoincrement())
    uuid            String @unique @db.VarChar(36)
    memberId        String? @db.VarChar(255)
    location        Locations @relation(fields: [locationId], references: [id])
    locationId      Int
    guestFirstName  String? @db.VarChar(20)
    guestLastName   String? @db.VarChar(20)
    guestEmail      String? @db.VarChar(50)
    phone           String? @db.VarChar(20)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    preparedAt      DateTime?
    completedAt     DateTime?
    completed       Int
    status          Int
}